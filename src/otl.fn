
fn from_erl @public case Path:
    epp.parse_file(Path, [], [])
end

fn ast_to_erl @public case (ok, Ast):
    erl_prettypr.format(erl_syntax.form_list(Ast))
end

fn ast_to_beam @public case Ast, Opts:
    match compile.forms(Ast, [return, strong_validation :: Opts]):
        case (error, _Errors, _Warnings)=Error: Error
        case error: (error, [(error, compile_forms_error)], [])
        else:
            match compile.forms(Ast, Opts):
                case ok, ModuleName, Code: (ok, ModuleName, Code, [])
                case (ok, _ModuleName, _Code, _Warnings)=Res: Res
                case (error, _Errors, _Warnings)=Error: Error
                case error: (error, [(error, compile_forms_error)], [])
            end
    end
end

fn beam_to_file @public case Code, DestPath, ModuleName:
    BeamName = atom_to_list(ModuleName) ++ ".beam"
    BeamPath = filename.join(DestPath, BeamName)
    match bin_to_file(Code, BeamPath):
        case error: (error, [(file_write_error, BeamPath)], [])
        case ok: (ok, [(module_name, ModuleName), (path, BeamPath)])
    end
end

fn read_file case Path:
    match file.read_file(Path):
        case ok, Content: (ok, unicode.characters_to_list(Content, utf8))
        case Other: Other
    end
end

fn with_file_content case Path, Fn:
    match read_file(Path):
        case ok, Content: Fn(Content)
        case Other: Other
    end
end

fn to_lex @public case Path:
    with_file_content(Path, fn str_to_lex:1)
end

fn to_ast @public case Path:
    with_file_content(Path, fn str_to_ast:1)
end

fn to_mod @public case Path, ModuleName, FunctionName:
    match to_ast(Path):
        case ok, Ast:
            ast_to_mod(Ast, Path, ModuleName, FunctionName)
        case Other: Other
    end
end

fn to_beam @public case Path, OutDir, ModuleName, FunctionName:
    match to_mod(Path, ModuleName, FunctionName):
        case ok, ModAst:
            Opts = []
            (ok, ModuleNameAtom, Code, _Warnings) = ast_to_beam(ModAst, Opts)
            beam_to_file(Code, OutDir, ModuleNameAtom)
        case Other: Other
    end
end

fn eval_path @public case Path:
    (ok, Ast) = to_ast(Path)
    Bindings = erl_eval.new_bindings()
    erl_eval.exprs(Ast, Bindings)
end

fn ast_to_mod case Ast, Path, ModuleName, FunctionName:
    FName = list_to_atom(FunctionName)
    Mod = [(attribute, 1, file, (Path, 1)),
        (attribute, 1, module, list_to_atom(ModuleName)),
        (attribute, 2, export, [(FName, 0)]),
        (function, 3, FName, 0, [(clause, 4, [], [], Ast)])]
    (ok, Mod)
end

fn str_to_lex @public case String:
    match otl_lexer.string(String):
        case ok, Tokens, Endline: (ok, Tokens, Endline)
        case eof, Endline: (error, (Endline, otl_lexer, (eof, Endline)))
        case error, Error: (error, Error)
        case error, Error, _: (error, Error)
    end
end

fn str_to_ast @public case Str:
    match str_to_lex(Str):
        case  ok, Tokens, _NewLine: otl_parser.parse(Tokens)
        case Other: Other
    end
end

fn bin_to_file case Bin, Path:
    to_file(Bin, Path, [binary, write])
end

fn to_file case Data, Path, Mode:
    match file.open(Path, Mode):
        case ok, Device:
            file.write(Device, Data)
            file.close(Device)
            ok
        case Error: Error
    end
end

fn print case Data:
    try
        io.format("~s~n", [Data])
    catch case _, _:
        io.format("~p~n", [Data])
    end
end

fn main @public
    case ["erl2ast", Path]:
        print(from_erl(Path))
    case ["erl2ast2erl", Path]:
        print(ast_to_erl(from_erl(Path)))
    case ["erl2beam", Path, OutDirPath]:
        (ok, Ast) = from_erl(Path)
        Opts = []
        (ok, ModuleName, Code, Warnings) = ast_to_beam(Ast, Opts)

        for Warning in Warnings:
            print(Warning)
        end

        print(beam_to_file(Code, OutDirPath, ModuleName))
    case ["lex", Path]:
        print(to_lex(Path))
    case ["ast", Path]:
        print(to_ast(Path))
    case ["mod", Path, ModuleName, FunctionName]:
        print(to_mod(Path, ModuleName, FunctionName))
    case ["beam", Path, OutDirPath, ModuleName, FunctionName]:
        print(to_beam(Path, OutDirPath, ModuleName, FunctionName))
    case ["erl", Path, ModuleName, FunctionName]:
        print(ast_to_erl(to_mod(Path, ModuleName, FunctionName)))
    case ["eval", Path]:
        (value, Value, _Bindings) = eval_path(Path)
        print(Value)
    case _Args:
        io.format("Usage:~n otl erl2ast file.erl~n")
        io.format(" otl erl2ast2erl file.erl~n")
        io.format(" otl erl2beam file.erl outdir~n")
        io.format(" otl lex file.otl~n")
        io.format(" otl ast file.otl~n")
        io.format(" otl mod file.otl module_name function_name~n")
        erlang.halt(0)
end
